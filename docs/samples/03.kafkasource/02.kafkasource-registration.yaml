apiVersion: scoby.triggermesh.io/v1alpha1
kind: CRDRegistration
metadata:
  name: kafkasource
spec:
  crd: kafkasources.sources.triggermesh.io
  workload:
    fromImage:
      repo: gcr.io/triggermesh/kafkasource-adapter:v1.25.0
    formFactor:
      deployment:
        replicas: 1
    parameterConfiguration:

      add:
        toEnv:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: K_METRICS_CONFIG
          value: "{}"
        - name: K_LOGGING_CONFIG
          value: "{}"

      fromSpec:
        toEnv:
        - path: spec.bootstrapServers
          name: BOOTSTRAP_SERVERS
        - path: spec.topic
          name: TOPIC
        - path: spec.groupID
          name: GROUP_ID
        - path: spec.auth.saslEnable
          name: SASL_ENABLE
        - path: spec.auth.securityMechanism
          name: SECURITY_MECHANISMS
        - path: spec.auth.tlsEnable
          name: TLS_ENABLE
        - path: spec.auth.tls.skipVerify
          name: SKIP_VERIFY
        - path: spec.auth.tls.ca
          name: CA
          valueFrom:
            secret:
              name: spec.auth.tls.ca.valueFromSecret.name
              key: spec.auth.tls.ca.valueFromSecret.key
        - path: spec.auth.tls.clientCert
          name: CLIENT_CERT
          valueFrom:
            secret:
              name: spec.auth.tls.clientCert.valueFromSecret.name
              key: spec.auth.tls.clientCert.valueFromSecret.key
        - path: spec.auth.tls.clientKey
          name: CLIENT_KEY
          valueFrom:
            secret:
              name: spec.auth.tls.clientKey.valueFromSecret.name
              key: spec.auth.tls.clientKey.valueFromSecret.key
        - path: spec.auth.username
          name: USERNAME
        - path: spec.auth.password
          name: PASSWORD
          valueFrom:
            secret:
              name: spec.auth.password.valueFromSecret.name
              key: spec.auth.password.valueFromSecret.key
        - path: spec.sink
          name: K_SINK
          valueFrom:
            builtInFunc:
              name: resolveAddress

    statusConfiguration:
      addElements:
      - path: status.sinkUri
        render:
          valueFromParameter:
            path: spec.sink

# MISSING:
# KerberosConfigPath  string `envconfig:"KERBEROS_CONFIG_PATH" required:"false" `
# KerberosServiceName string `envconfig:"KERBEROS_SERVICE_NAME" required:"false" `
# KerberosKeytabPath  string `envconfig:"KERBEROS_KEYTAB_PATH" required:"false"`
# KerberosRealm       string `envconfig:"KERBEROS_REALM" required:"false"`
# KerberosUsername    string `envconfig:"KERBEROS_USERNAME" required:"false"`
# KerberosPassword    string `envconfig:"KERBEROS_PASSWORD" required:"false"`
