apiVersion: scoby.triggermesh.io/v1alpha1
kind: CRDRegistration
metadata:
  name: kafkatarget
spec:
  crd: kafkatargets.targets.triggermesh.io
  workload:
    fromImage:
      repo: gcr.io/triggermesh/kafkatarget-adapter:v1.25.0
    formFactor:
      deployment:
        replicas: 1
        service:
          port: 80
          targetPort: 8080
    parameterConfiguration:

      add:
        toEnv:
        - name: METRICS_DOMAIN
          value: triggermesh.io/targets
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: K_METRICS_CONFIG
          value: "{}"
        - name: K_LOGGING_CONFIG
          value: "{}"

      fromSpec:
        toEnv:
        - path: spec.bootstrapServers
          name: BOOTSTRAP_SERVERS
        - path: spec.topic
          name: TOPIC
        - path: spec.topicReplicationFactor
          name: TOPIC_REPLICATION_FACTOR
        - path: spec.topicPartitions
          name: TOPIC_PARTITIONS
        - path: spec.discardCloudEventContext
          name: DISCARD_CE_CONTEXT
        - path: spec.auth.saslEnable
          name: SASL_ENABLE
        - path: spec.auth.securityMechanism
          name: SECURITY_MECHANISMS
        - path: spec.auth.tlsEnable
          name: TLS_ENABLE
        - path: spec.auth.tls.skipVerify
          name: SKIP_VERIFY
        - path: spec.auth.tls.ca
          name: CA
          valueFrom:
            secretPath:
              name: spec.auth.tls.ca.valueFromSecret.name
              key: spec.auth.tls.ca.valueFromSecret.key
        - path: spec.auth.tls.clientCert
          name: CLIENT_CERT
          valueFrom:
            secretPath:
              name: spec.auth.tls.clientCert.valueFromSecret.name
              key: spec.auth.tls.clientCert.valueFromSecret.key
        - path: spec.auth.tls.clientKey
          name: CLIENT_KEY
          valueFrom:
            secretPath:
              name: spec.auth.tls.clientKey.valueFromSecret.name
              key: spec.auth.tls.clientKey.valueFromSecret.key
        - path: spec.auth.username
          name: USERNAME
        - path: spec.auth.password
          name: PASSWORD
          valueFrom:
            secretPath:
              name: spec.auth.password.valueFromSecret.name
              key: spec.auth.password.valueFromSecret.key


# MISSING
# KerberosConfigPath  string `envconfig:"KERBEROS_CONFIG_PATH" required:"false" `
# KerberosServiceName string `envconfig:"KERBEROS_SERVICE_NAME" required:"false" `
# KerberosKeytabPath  string `envconfig:"KERBEROS_KEYTAB_PATH" required:"false"`
# KerberosRealm       string `envconfig:"KERBEROS_REALM" required:"false"`
# KerberosUsername    string `envconfig:"KERBEROS_USERNAME" required:"false"`
# KerberosPassword    string `envconfig:"KERBEROS_PASSWORD" required:"false"`



# NOT IMPLEMENTED
# ConnectionRefreshPeriod time.Duration `envconfig:"CONNECTION_REFRESH_PERIOD" default:"5m"`
# // This set of variables are experimental and not graduated to the CRD.
# CreateTopicIfMissing        bool  `envconfig:"CREATE_MISSING_TOPIC" default:"true"`
# FlushOnExitTimeoutMillisecs int   `envconfig:"FLUSH_ON_EXIT_TIMEOUT_MS" default:"10000"`
# CreateTopicTimeoutMillisecs int   `envconfig:"CREATE_TOPIC_TIMEOUT_MS" default:"10000"`

# NewTopicPartitions          int32 `envconfig:"TOPIC_PARTITIONS" default:"1"`
# NewTopicReplicationFactor   int16 `envconfig:"TOPIC_REPLICATION_FACTOR" default:"1"`

# DiscardCEContext bool `envconfig:"DISCARD_CE_CONTEXT"`