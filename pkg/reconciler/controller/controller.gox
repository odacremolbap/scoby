package controller

import (
	"context"
	"fmt"

	"github.com/go-logr/logr"
	"github.com/triggermesh/scoby/pkg/apis/scoby.triggermesh.io/v1alpha1"
	logf "sigs.k8s.io/controller-runtime/pkg/log"

	"k8s.io/apimachinery/pkg/runtime"
	utilruntime "k8s.io/apimachinery/pkg/util/runtime"

	apiextensionsv1 "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"
	clientgoscheme "k8s.io/client-go/kubernetes/scheme"

	"sigs.k8s.io/controller-runtime/pkg/builder"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/manager"
	"sigs.k8s.io/controller-runtime/pkg/reconcile"
)

type ScobyController struct {
	log     logr.Logger
	manager manager.Manager
	scheme  *runtime.Scheme
}

func New(m manager.Manager) *ScobyController {
	scheme := m.GetScheme()

	utilruntime.Must(clientgoscheme.AddToScheme(scheme))
	utilruntime.Must(v1alpha1.AddToScheme(scheme))

	return &ScobyController{
		log:     logf.Log.WithName("controller"),
		manager: m,
		scheme:  scheme,
	}
}

func (c *ScobyController) PopulateScheme(addToScheme func(s *runtime.Scheme) error) error {
	return addToScheme(c.scheme)
}

func (c *ScobyController) AddRegistrationHandler(object client.Object, reconciler reconcile.Reconciler) error {
	utilruntime.Must(webappv1.AddToScheme(scheme))

	err := builder.ControllerManagedBy(c.manager).
		For(object).
		Owns(&apiextensionsv1.CustomResourceDefinition{}).
		Complete(reconciler)
	if err != nil {
		return fmt.Errorf("could not build controller for %s: %w", object.GetObjectKind().GroupVersionKind(), err)
	}
	return nil
}

func (c *ScobyController) Start(ctx context.Context) error {
	c.log.Info("starting scoby controller")
	return c.manager.Start(ctx)
}
