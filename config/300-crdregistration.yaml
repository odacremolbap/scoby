apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.1
  creationTimestamp: null
  labels:
    triggermesh.io/crd-install: "true"
  name: crdregistrations.scoby.triggermesh.io
spec:
  group: scoby.triggermesh.io
  names:
    kind: CRDRegistration
    listKind: CRDRegistrationList
    plural: crdregistrations
    shortNames:
    - crdreg
    singular: crdregistration
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - jsonPath: .spec.crd
      name: CRD
      type: string
    - jsonPath: .status.conditions[?(@.type=="Ready")].status
      name: Ready
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: CRDRegistration uses existing CRDs to provide generic controllers
          for them.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: CRDRegistrationSpec defines the desired state of a CRD Registration
            properties:
              crd:
                description: Name of the CRD to be used.
                type: string
              hook:
                properties:
                  address:
                    properties:
                      ref:
                        description: Ref points to an addressable object.
                        properties:
                          apiVersion:
                            description: API version of the hook address.
                            type: string
                          kind:
                            description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                            type: string
                          name:
                            description: 'Name of the hook address. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                            type: string
                          namespace:
                            description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
                              This is optional field, it gets defaulted to the object
                              holding it if left out.'
                            type: string
                        required:
                        - kind
                        - name
                        type: object
                      uri:
                        description: URI can be an absolute URL(non-empty scheme and
                          non-empty host) pointing to the target or a relative URI.
                          Relative URIs will be resolved using the base URI retrieved
                          from Ref.
                        type: string
                    type: object
                  capabilities:
                    description: Capabilities that a hook implements.
                    items:
                      type: string
                    type: array
                  timeout:
                    description: Timeout for hook calls.
                    type: string
                  version:
                    type: string
                required:
                - address
                - version
                type: object
              workload:
                description: Workload is information on how to create the user workload.
                properties:
                  formFactor:
                    description: FormFactor indicates the kubernetes object that will
                      run instances of the component's workload.
                    properties:
                      deployment:
                        description: Deployment hosting the user workload.
                        properties:
                          replicas:
                            description: Replicas for the deployment.
                            type: integer
                          service:
                            description: Service to create pointing to the deployment.
                            properties:
                              port:
                                description: Port exposed at the service.
                                format: int32
                                type: integer
                              targetPort:
                                description: Port exposed at the target deployment.
                                format: int32
                                type: integer
                            required:
                            - port
                            - targetPort
                            type: object
                        required:
                        - replicas
                        type: object
                      knativeService:
                        description: KnativeService hosting the user workload.
                        properties:
                          maxScale:
                            description: MaxScale is the service maximum scaling replicas
                            type: integer
                          minScale:
                            description: MinScale is the service minimum scaling replicas
                            type: integer
                          visibility:
                            description: Visibility is the network visibility for
                              the service
                            type: string
                        type: object
                    type: object
                  fromImage:
                    description: FromImage contains the container image information.
                    properties:
                      repo:
                        description: Repo where the image can be downloaded
                        type: string
                    required:
                    - repo
                    type: object
                  parameterConfiguration:
                    description: ParameterConfiguration sets how object elements are
                      transformed into workload parameters.
                    properties:
                      addEnvs:
                        description: AddEnvs contains configurations for parameters
                          to be added to the workload not derived from the user instance.
                        items:
                          description: EnvVar represents an environment variable present
                            in a Container.
                          properties:
                            name:
                              description: Name of the environment variable. Must
                                be a C_IDENTIFIER.
                              type: string
                            value:
                              description: 'Variable references $(VAR_NAME) are expanded
                                using the previously defined environment variables
                                in the container and any service environment variables.
                                If a variable cannot be resolved, the reference in
                                the input string will be unchanged. Double $$ are
                                reduced to a single $, which allows for escaping the
                                $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce
                                the string literal "$(VAR_NAME)". Escaped references
                                will never be expanded, regardless of whether the
                                variable exists or not. Defaults to "".'
                              type: string
                            valueFrom:
                              description: Source for the environment variable's value.
                                Cannot be used if value is not empty.
                              properties:
                                configMapKeyRef:
                                  description: Selects a key of a ConfigMap.
                                  properties:
                                    key:
                                      description: The key to select.
                                      type: string
                                    name:
                                      description: 'Name of the referent. More info:
                                        https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                        TODO: Add other useful fields. apiVersion,
                                        kind, uid?'
                                      type: string
                                    optional:
                                      description: Specify whether the ConfigMap or
                                        its key must be defined
                                      type: boolean
                                  required:
                                  - key
                                  type: object
                                  x-kubernetes-map-type: atomic
                                fieldRef:
                                  description: 'Selects a field of the pod: supports
                                    metadata.name, metadata.namespace, `metadata.labels[''<KEY>'']`,
                                    `metadata.annotations[''<KEY>'']`, spec.nodeName,
                                    spec.serviceAccountName, status.hostIP, status.podIP,
                                    status.podIPs.'
                                  properties:
                                    apiVersion:
                                      description: Version of the schema the FieldPath
                                        is written in terms of, defaults to "v1".
                                      type: string
                                    fieldPath:
                                      description: Path of the field to select in
                                        the specified API version.
                                      type: string
                                  required:
                                  - fieldPath
                                  type: object
                                  x-kubernetes-map-type: atomic
                                resourceFieldRef:
                                  description: 'Selects a resource of the container:
                                    only resources limits and requests (limits.cpu,
                                    limits.memory, limits.ephemeral-storage, requests.cpu,
                                    requests.memory and requests.ephemeral-storage)
                                    are currently supported.'
                                  properties:
                                    containerName:
                                      description: 'Container name: required for volumes,
                                        optional for env vars'
                                      type: string
                                    divisor:
                                      anyOf:
                                      - type: integer
                                      - type: string
                                      description: Specifies the output format of
                                        the exposed resources, defaults to "1"
                                      pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                      x-kubernetes-int-or-string: true
                                    resource:
                                      description: 'Required: resource to select'
                                      type: string
                                  required:
                                  - resource
                                  type: object
                                  x-kubernetes-map-type: atomic
                                secretKeyRef:
                                  description: Selects a key of a secret in the pod's
                                    namespace
                                  properties:
                                    key:
                                      description: The key of the secret to select
                                        from.  Must be a valid secret key.
                                      type: string
                                    name:
                                      description: 'Name of the referent. More info:
                                        https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                        TODO: Add other useful fields. apiVersion,
                                        kind, uid?'
                                      type: string
                                    optional:
                                      description: Specify whether the Secret or its
                                        key must be defined
                                      type: boolean
                                  required:
                                  - key
                                  type: object
                                  x-kubernetes-map-type: atomic
                              type: object
                          required:
                          - name
                          type: object
                        type: array
                      customize:
                        description: Customize contains instructions to modify parameters
                          generation from the instance's spec.
                        items:
                          description: CustomizeParameters contains instructions to
                            modify parameters generation for the controlled instance
                            spec.
                          properties:
                            path:
                              description: JSON simplified path for the parameter.
                              type: string
                            render:
                              description: Render options for the parameter generation.
                              properties:
                                name:
                                  description: Name is the name of the parameter to
                                    be created.
                                  type: string
                                skip:
                                  description: Skip sets whether the object should
                                    skip rendering as a workload parameter.
                                  type: boolean
                                value:
                                  description: Value is a literal value to be assigned
                                    to the parameter.
                                  type: string
                                valueFromBuiltInFunc:
                                  description: ValueFromBuiltInFunc configures the
                                    field to be rendered acording to the chosen built-in
                                    function.
                                  properties:
                                    args:
                                      description: The key to select.
                                      items:
                                        type: string
                                      type: array
                                    name:
                                      description: Function name
                                      type: string
                                  required:
                                  - name
                                  type: object
                                valueFromConfigMap:
                                  description: ValueFromConfigMap is a reference to
                                    a ConfigMap.
                                  properties:
                                    key:
                                      description: The key to select.
                                      type: string
                                    name:
                                      description: Object name
                                      type: string
                                  required:
                                  - key
                                  - name
                                  type: object
                                valueFromSecret:
                                  description: ValueFromSecret is a reference to a
                                    Secret.
                                  properties:
                                    key:
                                      description: The key to select.
                                      type: string
                                    name:
                                      description: Object name
                                      type: string
                                  required:
                                  - key
                                  - name
                                  type: object
                              type: object
                          required:
                          - path
                          type: object
                        type: array
                      global:
                        description: Global defines the configuration to be applied
                          to all generated parameters.
                        properties:
                          defaultPrefix:
                            description: DefaultPrefix to be appeneded to keys by
                              all generated parameters. This configuration does not
                              affect parameter keys explicitly set by users.
                            type: string
                        type: object
                    type: object
                  statusConfiguration:
                    description: StatusConfiguration contains rules to populate a
                      controlled instance status.
                    properties:
                      addElements:
                        description: AddElements contains configurations for status
                          elements to be added.
                        items:
                          description: StatusAddElement is a customization option
                            that adds or fills an element at an object instance status
                            structure.
                          properties:
                            path:
                              description: JSON simplified path for the status element.
                              type: string
                            render:
                              description: Render options for the status.
                              properties:
                                valueFromParameter:
                                  description: Reference an object element and use
                                    its parameter to fill the status.
                                  properties:
                                    path:
                                      description: JSON simplified path for the referenced
                                        element.
                                      type: string
                                  required:
                                  - path
                                  type: object
                              type: object
                          required:
                          - path
                          type: object
                        type: array
                      conditionsFromHook:
                        description: ConditionsFromHook contains conditions expected
                          to be informed from the Hook.
                        items:
                          description: ConditionsFromHook are extended conditions
                            that must be informed from the configured Hook.
                          properties:
                            type:
                              description: Type of the condition to be informed.
                              type: string
                          required:
                          - type
                          type: object
                        type: array
                    type: object
                required:
                - fromImage
                type: object
            required:
            - crd
            - workload
            type: object
          status:
            description: CRDRegistrationStatus defines the observed state of CRDRegistration
            properties:
              annotations:
                additionalProperties:
                  type: string
                description: Annotations is additional Status fields for the Resource
                  to save some additional State as well as convey more information
                  to the user. This is roughly akin to Annotations on any k8s resource,
                  just the reconciler conveying richer information outwards.
                type: object
              conditions:
                description: Conditions the latest available observations of a resource's
                  current state.
                items:
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition
                        transitioned from one status to another. This should be when
                        the underlying condition changed.  If that is not known, then
                        using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating
                        details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    reason:
                      description: reason contains a programmatic identifier indicating
                        the reason for the condition's last transition. Producers
                        of specific condition types may define expected values and
                        meanings for this field, and whether the values are considered
                        a guaranteed API. The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase.
                        --- Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              observedGeneration:
                description: ObservedGeneration is the 'Generation' of the Object
                  that was last processed by the controller.
                format: int64
                type: integer
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
